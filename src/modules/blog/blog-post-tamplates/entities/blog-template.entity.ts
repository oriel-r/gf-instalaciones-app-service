import {
  Column,
  DeepPartial,
  Entity,
  OneToMany,
  PrimaryGeneratedColumn,
} from 'typeorm';
import { BaseEntity } from '../../../../common/entities/base.entity';
import { ApiProperty } from '@nestjs/swagger';
import { BlogPost } from 'src/modules/blog/blog-posts/entities/blog-post.entity';

@Entity()
export class BlogPostTemplate extends BaseEntity {
  @ApiProperty({
    title: 'id',
    description: 'autogenerated uuid',
    type: 'string',
  })
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @ApiProperty({
    title: 'name',
    description: "tamplate's name",
    type: 'string',
  })
  @Column('varchar', { nullable: false })
  name: string;

  @ApiProperty({
    title: 'numberOfContentBlocks',
    description: 'number of content blocks',
    type: 'string',
  })
  @Column('integer', { name: 'number_of_content_blocks', nullable: false })
  numberOfContentBlocks: number;

  @ApiProperty({
    title: 'blogPosts',
    description: 'blog post with use this template',
    type: () => [BlogPost],
  })
  @OneToMany(() => BlogPost, (blogPosts) => blogPosts.blogPostTemplate, {
    nullable: true,
  })
  blogPosts: BlogPost[];

  constructor(partial: DeepPartial<BlogPost>) {
    super();
    Object.assign(this, partial);
  }
}
